apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  # add an additional local user with apiKey and login capabilities
  #   apiKey - allows generating API keys
  #   login - allows to login using UI
  accounts.alice: apiKey, login
  # disables user. User is enabled by default
  accounts.alice.enabled: "false"


argocd login 43.204.112.140:31142
124  kubectl get cm
  125  kubectl get ns
  126  kubectl get cm -n=argocd
  127  ls $HOME/.ssh
  128  exit
  129  history
  130  clear
  131  kubectl get cm -n=argocd
  132  kubectl describe cm argocd-ssh-known-hosts-cm -n=argocd
  133  clear
  134  ls
  135  cler
  136  clear
  137  ls
  138  vi cm.yaml
  139  kubectl apply -f cm.yaml -n=argocd
  140  kubectl describe cm argocd-ssh-known-hosts-cm -n=argocd
  141  clear
  142  argocd account list
  143  ls
  144  vi cm.yaml
  145  kubectl apply -f cm.yaml -n=argocd
  146  argocd account list
  147  argocd account
  148  clear
  149  argocd account update-password -h
  150  clear
  151  argocd account update-password --account alice
  152  argocd account -h
  153  clear
  154  argocd account can-i -h
  155  argocd account can-i sync applications '*'
  156  argocd account can-i update projects 'default'
  157  argocd account can-i create clusters '*'
  158  argocd account can-i -h
  159  clear
  160  argocd account -h
  161  argocd account list
  162  argocd account get admin
  163  argocd account get-user-info admin
  164  argocd account get-user-info
  165  argocd account getadmin
  166  argocd account get admin
  167  argocd account generate-token -h
  168  argocd account generate-token
  169  argocd account list
  170  argocd account generate-token --account alince
  171  argocd account generate-token --account alice
  172  argocd account get alice
  173  argocd account get -h
  174  argocd account get --account alice
  175*
  176  argocd account -h
  177  argocd account delete-token -h
  178  argocd account get --account alice
  179  argocd account -h
  180  argocd account delete-token -h
  181  argocd account delete-token --account alice 965a415a-dfb2-409a-bae7-fe818e3978cc
  182  argocd account get --account alice
  183  argocd account -h


- Argo CD Limitation
	CI for Non-container SDLC - nO
	CD for Non-container SDLC - no
	CI for container SDLC - nO
	CD for container SDLC - YES
- No Auditing & Reportings & Compliance
- no infra Provisioning

DD - inf
new  - apm
splunk - log
dyan - all
app - all

=======================================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
  namespace: argocd
data:
  policy.default: role:readonly
  policy.csv: |
    p, role:org-admin, applications, *, */*, allow
    p, role:org-admin, clusters, get, *, allow
    p, role:org-admin, repositories, get, *, allow
    p, role:org-admin, repositories, create, *, allow
    p, role:org-admin, repositories, update, *, allow
    g, alice, role:org-admin

p, <role/user/group>, <resource>, <action>, <appproject>/<object>

====================================================================
					ArgocD 
				------------------
				RBAC

				role
					user|group
					res
					action



 183  argocd account -h
  184  history
  185  history | grep argocd login
  186  history | grep login
  187  clear
  188  ls
  189  kubectl get ns
  190  kubectl get cm -n=argocd
  191  kubectl describe cm argocd-rbac-cm -n=argocd
  192  clear
  193  ls
  194  vi cm-rbac.yaml
  195  ls
  196  kubectl apply -f cm-rbac.yaml -n=argocd
  197  kubectl describe cm argocd-rbac-cm -n=argocd
  198  argocd account get-user-info admin
  199  argocd account get-user-info
  200  argocd get roles -n=argocd
  201  kubectl get roles -n=argocd
  202  kubectl describe roles argocd-dex-server -n=argocd
  203  clear
  204  kubectl describe roles argocd-dex-server -n=argocd
  205  kubectl get cm -n=argocd
  206  kubectl describe cm argocd-rbac-cm -n=argocd
  207  clear
  208  kubectl explain RoleBinding.subjects
  209  kubectl explain RoleBinding.subjects.kind
  210  clear
  211  ls
  212  vi cm-rbac.yaml
  213  kubectl apply -f cm-rbac.yaml -n=argocd
  214  kubectl describe cm argocd-rbac-cm -n=argocd
  215  vi cm-rbac.yaml
  216  clear
  217  kubectl describe cm argocd-rbac-cm -n=argocd
  218  clear
  219  kubectl apply -f cm-rbac.yaml -n=argocd
  220  kubectl describe cm argocd-rbac-cm -n=argocd
  221  clear
  222  argocd account get-user-info
  223  kubectl describe cm argocd-rbac-cm -n=argocd
  224  clear
  225  ls
  226  argocd
  227  argocd repo -h
  228  argocd repo list
  229  clear
  230  argocd repo list
  231  clear
  232  argocd repo list
  233  argocd repo rm -h
  234  argocd repo rm https://github.com/argoproj/argocd-example-apps
  235  argocd repo list
  236  clear
  237  argocd logout
  238  argocd logout 43.204.112.140:31142
  239  clear
  240  argocd login 43.204.112.140:31142
  241  history
  242  argocd repo list
  243  argocd repo rm https://github.com/argoproj/argocd-example-apps
--------------------------------------------

data:
  policy.csv: |
    p, role:org-admin, applications, *, */*, allow
    p, role:org-admin, clusters, get, *, allow
    p, role:org-admin, repositories, get, *, allow
    p, role:org-admin, repositories, create, *, allow
    p, role:org-admin, repositories, update, *, allow
    p, role:org-admin, repositories, delete, *, allow
    g, <new-user>, role:org-admin
  policy.default: role:''

--------------------------------------------------
data:
  policy.default: role:readonly
  policy.csv: |
    p, role:org-admin, applications, *, */*, allow
    p, role:org-admin, clusters, get, *, allow
    p, role:org-admin, repositories, get, *, allow
    p, role:org-admin, repositories, create, *, allow
    p, role:org-admin, repositories, update, *, allow
    p, role:org-admin, repositories, delete, *, allow
    g, your-github-org:your-team, role:org-admin
    g, group, role:org-admin
--------------------------------------------------
data:
  policy.default: role:readonly
  policy.csv: |
    p, role:staging-db-admins, applications, create, staging-db-admins/*, allow
    p, role:staging-db-admins, applications, delete, staging-db-admins/*, allow
    p, role:staging-db-admins, applications, get, staging-db-admins/*, allow
    p, role:staging-db-admins, applications, override, staging-db-admins/*, allow
    p, role:staging-db-admins, applications, sync, staging-db-admins/*, allow
    p, role:staging-db-admins, applications, update, staging-db-admins/*, allow
    p, role:staging-db-admins, projects, get, staging-db-admins, allow
    g, db-admins, role:staging-db-admins

This example defines a role called staging-db-admins with seven permissions that allow that role to perform the actions (create/delete/get/override/sync/update applications, and get appprojects) against * (all) objects in the staging-db-admins Argo CD AppProject.
-------------------------------------------------
The local users don't provide advanced features such as groups, login history etc. 
----------------------------------------------------


p, user:alice, applications, *, */*, allow
p, user:alice, applications, *, */*, allow
p, user:alice, applications, *, */*, allow
p, user:alice, applications, *, */*, allow
p, user:alice, applications, *, */*, allow
p, user:alice, applications, *, */*, allow
===================================
Rajesh - 1 k8 (argocd) + harshit + rahul		= 43.204.112.140
Harshit - 1 k8		= 13.233.201.203
Rahul - 1 k8			= 3.110.123.83

Step 1 - Add all clustors to config file.

==============================================
config
-------------------------------------------
clustor(s)
- clustor1
- clustor2
- clustor3

user(s)
- user1 - cert + pvt key
- user2 - cert + pvt key
- user3 - cert + pvt key

context(s)
- context1 = clustor1 + user2
- context2 = clustor2 + user3

- context:
    cluster: harshit
    user: kubernetes-harshit
  name: kubernetes-admin@harshit

kubernetes-admin@harshit


[centos@rajesh ~]$ kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://172.31.9.118:6443
  name: harshit
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://172.31.11.197:6443
  name: kubernetes
contexts:
- context:
    cluster: harshit
    user: kubernetes-admin1
  name: kubernetes-admin@harshit
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
- name: kubernetes-admin1
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED



kubectl --context=kubernetes-admin@harshit get pods

$ argocd cluster list
$ argocd cluster add CONTEXT [flags]
$ argocd cluster add kubernetes-admin@harshit --name harshit








